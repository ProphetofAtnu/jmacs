(defclass edn-language-service-command (kernel-command) (
    (code :initarg :code :type string)
    (linePosition :initarg :linePosition :type edn-line-position)))

(defclass edn-kernel-command (
    (targetKernelName :initarg :targetKernelName :initform nil  :type string)
    (originUri :initarg :originUri :initform nil  :type string)
    (destinationUri :initarg :destinationUri :initform nil  :type string)))

(defclass edn-cancel (kernel-command) ())

(defclass edn-change-working-directory (kernel-command) (
    (workingDirectory :initarg :workingDirectory :type string)))

(defclass edn-compile-project (kernel-command) ())

(defclass edn-display-error (kernel-command) (
    (message :initarg :message :type string)))

(defclass edn-display-value (kernel-command) (
    (formattedValue :initarg :formattedValue :type edn-formatted-value)
    (valueId :initarg :valueId :type string)))

(defclass edn-open-document (kernel-command) (
    (relativeFilePath :initarg :relativeFilePath :type string)
    (regionName :initarg :regionName :initform nil  :type string)))

(defclass edn-open-project (kernel-command) (
    (project :initarg :project :type edn-project)))

(defclass edn-quit (kernel-command) ())

(defclass edn-request-completions (language-service-command) ())

(defclass edn-request-diagnostics (kernel-command) (
    (code :initarg :code :type string)))

(defclass edn-request-hover-text (language-service-command) ())

(defclass edn-request-input (kernel-command) (
    (prompt :initarg :prompt :type string)
    (isPassword :initarg :isPassword :type boolean)
    (inputTypeHint :initarg :inputTypeHint :type string)
    (valueName :initarg :valueName :type string)))

(defclass edn-request-kernel-info (kernel-command) ())

(defclass edn-request-signature-help (language-service-command) ())

(defclass edn-request-value (kernel-command) (
    (name :initarg :name :type string)
    (mimeType :initarg :mimeType :type string)))

(defclass edn-request-value-infos (kernel-command) ())

(defclass edn-send-editable-code (kernel-command) (
    (kernelName :initarg :kernelName :type string)
    (code :initarg :code :type string)))

(defclass edn-send-value (kernel-command) (
    (formattedValue :initarg :formattedValue :type edn-formatted-value)
    (name :initarg :name :type string)))

(defclass edn-submit-code (kernel-command) (
    (code :initarg :code :type string)
    (submissionType :initarg :submissionType :initform nil  :type edn-submission-type)))

(defclass edn-update-displayed-value (kernel-command) (
    (formattedValue :initarg :formattedValue :type edn-formatted-value)
    (valueId :initarg :valueId :type string)))

(defclass edn-kernel-event ())

(defclass edn-display-element (interactive-document-output-element) (
    (data :initarg :data :type 'hash-table)
    (metadata :initarg :metadata :type 'hash-table)))

(defclass edn-interactive-document-output-element ())

(defclass edn-return-value-element (interactive-document-output-element) (
    (data :initarg :data :type 'hash-table)
    (executionOrder :initarg :executionOrder :type number)
    (metadata :initarg :metadata :type 'hash-table)))

(defclass edn-text-element (interactive-document-output-element) (
    (name :initarg :name :type string)
    (text :initarg :text :type string)))

(defclass edn-error-element (interactive-document-output-element) (
    (errorName :initarg :errorName :type string)
    (errorValue :initarg :errorValue :type string)
    (stackTrace :initarg :stackTrace :type (array string))))

(defclass edn-document-kernel-info (
    (name :initarg :name :type string)
    (languageName :initarg :languageName :initform nil  :type string)
    (aliases :initarg :aliases :type (array string))))

(defclass edn-notebook-parse-request (notebook-parse-or-serialize-request) (
    (type :initarg :type :type edn-request-type)
    (rawData :initarg :rawData :type array)))

(defclass edn-notebook-parse-or-serialize-request (
    (type :initarg :type :type edn-request-type)
    (id :initarg :id :type string)
    (serializationType :initarg :serializationType :type edn-document-serialization-type)
    (defaultLanguage :initarg :defaultLanguage :type string)))

(defclass edn-notebook-serialize-request (notebook-parse-or-serialize-request) (
    (type :initarg :type :type edn-request-type)
    (newLine :initarg :newLine :type string)
    (document :initarg :document :type edn-interactive-document)))

(defclass edn-notebook-parse-response (notebook-parser-server-response) (
    (document :initarg :document :type edn-interactive-document)))

(defclass edn-notebook-parser-server-response (
    (id :initarg :id :type string)))

(defclass edn-notebook-serialize-response (notebook-parser-server-response) (
    (rawData :initarg :rawData :type array)))

(defclass edn-notebook-error-response (notebook-parser-server-response) (
    (errorMessage :initarg :errorMessage :type string)))

(defclass edn-assembly-produced (kernel-event) (
    (assembly :initarg :assembly :type string)))

(defclass edn-code-submission-received (kernel-event) (
    (code :initarg :code :type string)))

(defclass edn-command-cancelled (kernel-event) ())

(defclass edn-command-failed (kernel-command-completion-event) (
    (message :initarg :message :type string)))

(defclass edn-kernel-command-completion-event (kernel-event) (
    (executionOrder :initarg :executionOrder :initform nil  :type number)))

(defclass edn-command-succeeded (kernel-command-completion-event) ())

(defclass edn-complete-code-submission-received (kernel-event) (
    (code :initarg :code :type string)))

(defclass edn-completions-produced (kernel-event) (
    (linePositionSpan :initarg :linePositionSpan :initform nil  :type edn-line-position-span)
    (completions :initarg :completions :type (array edn-completion-item))))

(defclass edn-diagnostic-log-entry-produced (diagnostic-event) (
    (message :initarg :message :type string)))

(defclass edn-diagnostic-event (kernel-event) ())

(defclass edn-diagnostics-produced (kernel-event) (
    (diagnostics :initarg :diagnostics :type Array<Diagnostic>)
    (formattedDiagnostics :initarg :formattedDiagnostics :type (array edn-formatted-value))))

(defclass edn-displayed-value-produced (display-event) ())

(defclass edn-display-event (kernel-event) (
    (formattedValues :initarg :formattedValues :type (array edn-formatted-value))
    (valueId :initarg :valueId :initform nil  :type string)))

(defclass edn-displayed-value-updated (display-event) ())

(defclass edn-document-opened (kernel-event) (
    (relativeFilePath :initarg :relativeFilePath :type string)
    (regionName :initarg :regionName :initform nil  :type string)
    (content :initarg :content :type string)))

(defclass edn-error-produced (display-event) (
    (message :initarg :message :type string)))

(defclass edn-hover-text-produced (kernel-event) (
    (content :initarg :content :type (array edn-formatted-value))
    (linePositionSpan :initarg :linePositionSpan :initform nil  :type edn-line-position-span)))

(defclass edn-incomplete-code-submission-received (kernel-event) ())

(defclass edn-input-produced (kernel-event) (
    (value :initarg :value :type string)))

(defclass edn-kernel-extension-loaded (kernel-event) ())

(defclass edn-kernel-info-produced (kernel-event) (
    (kernelInfo :initarg :kernelInfo :type edn-kernel-info)))

(defclass edn-kernel-ready (kernel-event) ())

(defclass edn-package-added (kernel-event) (
    (packageReference :initarg :packageReference :type edn-resolved-package-reference)))

(defclass edn-project-opened (kernel-event) (
    (projectItems :initarg :projectItems :type (array edn-project-item))))

(defclass edn-return-value-produced (display-event) ())

(defclass edn-signature-help-produced (kernel-event) (
    (signatures :initarg :signatures :type (array edn-signature-information))
    (activeSignatureIndex :initarg :activeSignatureIndex :type number)
    (activeParameterIndex :initarg :activeParameterIndex :type number)))

(defclass edn-standard-error-value-produced (display-event) ())

(defclass edn-standard-output-value-produced (display-event) ())

(defclass edn-value-infos-produced (kernel-event) (
    (valueInfos :initarg :valueInfos :type (array edn-kernel-value-info))))

(defclass edn-value-produced (kernel-event) (
    (name :initarg :name :type string)
    (formattedValue :initarg :formattedValue :type edn-formatted-value)))

(defclass edn-working-directory-changed (kernel-event) (
    (workingDirectory :initarg :workingDirectory :type string)))